{"version":3,"file":"component---src-pages-stats-js-36ded7b0e40950b8b499.js","mappings":";iGAAA,OAOA,WACE,aAEA,IAAIA,EAAS,CAAC,EAAEC,eAChB,SAASC,IAEP,IADA,IAAIC,EAAU,GACLC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAAMF,UAAUD,GACpB,GAAKG,EAAL,CACA,IAAIC,SAAiBD,EACrB,GAAgB,WAAZC,GAAoC,WAAZA,EAC1BL,EAAQM,KAAKF,QACR,GAAIG,MAAMC,QAAQJ,IACvB,GAAIA,EAAID,OAAQ,CACd,IAAIM,EAAQV,EAAWW,MAAM,KAAMN,GAC/BK,GACFT,EAAQM,KAAKG,EAEjB,OACK,GAAgB,WAAZJ,EACT,GAAID,EAAIO,WAAaC,OAAOC,UAAUF,SACpC,IAAK,IAAIG,KAAOV,EACVP,EAAOkB,KAAKX,EAAKU,IAAQV,EAAIU,IAC/Bd,EAAQM,KAAKQ,QAIjBd,EAAQM,KAAKF,EAAIO,WAnBH,CAsBpB,CACA,OAAOX,EAAQgB,KAAK,IACtB,CACqCC,EAAOC,SAC1CnB,EAAWoB,QAAUpB,EACrBkB,EAAOC,QAAUnB,QAKhB,KAFwB,EAAF,WACrB,OAAOA,CACR,UAFoB,OAEpB,YAIJ,CA5CD,2GCDA,MAAMqB,EAAW,2BACjB,IAAIC,EAAW,sCACXC,EAAW,EACXC,EAAW,MACXC,GAAoB,EAqaxB,UAnakBC,KACd,MAAM,EAACC,EAAW,EAACC,IAAiBC,EAAAA,EAAAA,UAAS,CACzCC,SAAU,EACVC,YAAa,EACbC,UAAW,EACXC,iBAAkB,EAClBC,aAAc,EACdC,UAAW,KAET,EAACC,EAAc,EAACC,IAAoBR,EAAAA,EAAAA,UAAS,CAC/CS,SAAS,EACTC,KAAM,KAGJC,EAAsB,CACxB,UACA,QACA,QACA,cACA,iBACA,oBACA,UACA,YACA,SACA,mBACA,WAEEC,EAAsB,CACxB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAgBJ,MAAM,EAACC,EAAS,EAACC,IAAed,EAAAA,EAAAA,UAAS,KAEnC,EAACe,EAAoB,EAACC,IAA0BhB,EAAAA,EAAAA,WAAS,GAE/D,SAASiB,EAAeC,GACpB,MAAMC,EAAM,IAAIC,IAAI,GAAG5B,EAAWC,GAGlC,OAFA0B,EAAIE,aAAaC,OAAO,WAAY5B,GACpCyB,EAAIE,aAAaC,OAAO,WAAY3B,GAC7B4B,MAAMJ,GACRK,MAAMC,GACCA,EAASC,GAAWD,EAASE,OACrBC,QAAQC,OAAOJ,KAE9BD,MAAMM,IACH,IAAIC,EAAOD,EAAWE,UAAUzD,OAE5B2C,KACAe,EAAAA,EAAAA,GAAIC,SAASC,uBAAuB,WAAWC,SAC1CC,GAAOA,EAAGC,UAAUC,OAAO,YAEhCrB,EAAeoB,UAAUE,IAAI,UAC7BtB,EAAeoB,UAAUC,OAAO,iBAGpC,MAAME,EAAkB,GACxB,IAAK,IAAIpE,EAAI,EAAGA,EAAI0D,EAAM1D,IAAK,CAC3B,MAAMqE,EAAOC,KAAKC,MACdd,EAAWzB,aAAahC,GAAK,GAAK,IAEhCwE,GACDf,EAAWzB,aAAahC,GAAK,GAC9B,IACFyE,QAAQ,GAEV,IAAIvC,GAAgB,EAEpB,GAAI,kBAAmBuB,EAAY,CAC/B,MAAMiB,EAAQjB,EAAWvB,cAAclC,GAAG2E,QACtC,CAACC,EAAaC,IACVD,EAAcC,GAClB,GAEJ3C,EAAgBuB,EAAWvB,cAAclC,GAAG8E,KACvCC,GAAU,CACPA,GACEA,EAAQL,EAAS,KAAKD,QAAQ,KAG5C,CAEAL,EAAgB/D,KAAK,CACjB2E,SAAUvB,EAAWE,UAAU3D,GAC/BiC,UAAWwB,EAAWwB,WAAWjF,GACjC+B,iBAAkB0B,EAAW1B,iBAAiB/B,GAC9CgC,cACKqC,EAAO,EAAIA,EAAO,KAAO,KACzBG,EAAQ,EAAIA,EAAQ,KAAO,IAChCtC,cAAeA,GAEvB,CAEAO,EAAY2B,EAAgB,IAE/Bc,OAAOC,GAAMC,QAAQC,MAAMF,IACpC,EAEAG,EAAAA,EAAAA,YAAU,KACNpC,MAAM/B,EAAW,kDACZgC,MAAMC,GACCA,EAASC,GAAWD,EAASE,OACrBC,QAAQC,OAAOJ,KAE9BD,MAAMM,IACHd,GAAuB,GACvBjB,EAAc+B,EAAW,IAE5ByB,OAAOC,GAAMC,QAAQC,MAAMF,KAChCvC,GAAgB,GACjB,IAYH,OACI2C,EAAAA,cAACC,EAAAA,EAAM,KACHD,EAAAA,cAACE,EAAAA,EAAG,CAACC,MAAM,UAEXH,EAAAA,cAAA,OAAKI,UAAU,aACXJ,EAAAA,cAAA,MAAII,UAAU,eAAc,iBAE5BJ,EAAAA,cAAA,aACIA,EAAAA,cAAA,aACIA,EAAAA,cAAA,UACIA,EAAAA,cAAA,UAAI,iBACJA,EAAAA,cAAA,MACII,UACIjD,EAAsB,UAAY,MAGrCjB,EAAWG,SAASgE,iBAAiB,WAG9CL,EAAAA,cAAA,UACIA,EAAAA,cAAA,UAAI,uBACJA,EAAAA,cAAA,MACII,UACIjD,EAAsB,UAAY,MAGrCjB,EAAWK,UAAU8D,iBAAiB,WAG/CL,EAAAA,cAAA,UACIA,EAAAA,cAAA,UAAI,gBACJA,EAAAA,cAAA,MACII,UACIjD,EAAsB,UAAY,MAGrCjB,EAAWM,iBAAiB6D,iBAAkB,IAAI,aAI3DL,EAAAA,cAAA,UACIA,EAAAA,cAAA,UAAI,eACJA,EAAAA,cAAA,MACII,UACIjD,EAAsB,UAAY,MAGrC4B,KAAKC,MACF9C,EAAWO,aAAe,GAAK,GAAK,KACrC,IAAI,QACD,IACLsC,KAAKC,MAAM9C,EAAWO,aAAe,GAAK,IACvC,IAAK,IAAI,OACR,KACFP,EAAWO,aAAe,GAAM,IAAIyC,QACnC,GACD,IAAI,UAIfc,EAAAA,cAAA,UACIA,EAAAA,cAAA,UAAI,eACJA,EAAAA,cAAA,MACII,UACIjD,EAAsB,UAAY,MAGrCjB,EAAWQ,UAAU2D,iBAAiB,aAMvDL,EAAAA,cAAA,WACIA,EAAAA,cAAA,MAAII,UAAU,gCAA+B,oBAI7CJ,EAAAA,cAAA,OAAKI,UAAU,0BAAyB,2CAGxCJ,EAAAA,cAAA,OAAKI,UAAU,0BACXJ,EAAAA,cAAA,aACIA,EAAAA,cAAA,SACIM,KAAK,WACLd,MAAOxD,EACPuE,SAAWC,IACPxE,EAAoBwE,EAAEC,OAAOC,OAAO,IAEzC,IAAI,iCAIfV,EAAAA,cAAA,OAAKI,UAAU,0BACXJ,EAAAA,cAAA,SAAOW,GAAG,eAAc,sBAEpBX,EAAAA,cAAA,UACIY,aAAa,MACbL,SAAWC,IACP3E,EAAW,2BACXE,EAAWyE,EAAEC,OAAOjB,MACH,QAAbzD,IACAF,EAAW,oBACf,MAAMgF,EACFvC,SAASwC,cACL,qBAERD,EAAMnC,UAAUE,IAAI,gBACpBvB,IAAiBO,MAAK,IAClBiD,EAAMnC,UAAUC,OAAO,iBAC1B,GAGLqB,EAAAA,cAAA,UAAQR,MAAM,OAAM,OACpBQ,EAAAA,cAAA,UAAQR,MAAM,WAAU,WACxBQ,EAAAA,cAAA,UAAQR,MAAM,SAAQ,SACtBQ,EAAAA,cAAA,UAAQR,MAAM,SAAQ,qBACtBQ,EAAAA,cAAA,UAAQR,MAAM,eAAc,wBAG5BQ,EAAAA,cAAA,UAAQR,MAAM,aAAY,0BAG1BQ,EAAAA,cAAA,UAAQR,MAAM,kBAAiB,aAG/BQ,EAAAA,cAAA,UAAQR,MAAM,WAAU,WACxBQ,EAAAA,cAAA,UAAQR,MAAM,iBAAgB,aAC9BQ,EAAAA,cAAA,UAAQR,MAAM,UAAS,UACvBQ,EAAAA,cAAA,UAAQR,MAAM,oBAAmB,oBAGjCQ,EAAAA,cAAA,UAAQR,MAAM,WAAU,gBAO5CQ,EAAAA,cAAA,OAAKI,UAAU,+BACXJ,EAAAA,cAAA,SAAOI,UAAU,0BACbJ,EAAAA,cAAA,aACIA,EAAAA,cAAA,UACIA,EAAAA,cAAA,MAAII,UAAU,QAAO,QACrBJ,EAAAA,cAAA,UAAI,aACJA,EAAAA,cAAA,MACII,UAAU,UACVW,QAAUP,IACFA,EAAEC,OAAO/B,UAAUsC,SAAS,YAEhCR,EAAEC,OAAO/B,UAAUE,IAAI,gBACvB9C,EAAW,EACXuB,EAAemD,EAAEC,QAAO,GAE/B,eAGDT,EAAAA,cAAA,MACII,UAAU,iBACVW,QAAUP,IACFA,EAAEC,OAAO/B,UAAUsC,SAAS,YAEhCR,EAAEC,OAAO/B,UAAUE,IAAI,gBACvB9C,EAAW,EACXuB,EAAemD,EAAEC,QAAO,GAE/B,cAGDT,EAAAA,cAAA,MACII,UAAU,UACVW,QAAUP,IACFA,EAAEC,OAAO/B,UAAUsC,SAAS,YAEhCR,EAAEC,OAAO/B,UAAUE,IAAI,gBACvB9C,EAAW,EACXuB,EAAemD,EAAEC,QAAO,GAE/B,iBAMTT,EAAAA,cAAA,aACyB,IAApB/C,EAAStC,OACNqF,EAAAA,cAAA,MAAII,UAAW,aACXJ,EAAAA,cAAA,MAAII,UAAU,kBAAkBa,QAAQ,KAAI,eAKhDhE,EAASsC,KAAI,CAACC,EAAO0B,IACjBlB,EAAAA,cAAA,MACII,UAAS,SACLc,EAAQ,EAAI,MAAQ,QAExB5F,IAAK4F,EACLC,aAAeC,IAhNjBC,OACZ,KADYA,EAkNU7B,EAAM7C,gBAhNrCX,GACLY,EAAiB,CAAEC,SAAS,EAAMC,KAAMuE,GAgNP,EAELC,aAAeF,IA9M3CxE,EAAiB,CAAEC,SAAS,EAAOC,KAAM,IA+MU,GAGvBkD,EAAAA,cAAA,MAAII,UAAU,wBACTc,EAAQ,EAAE,KAEflB,EAAAA,cAAA,UAAKR,EAAMC,UACXO,EAAAA,cAAA,MAAII,UAAU,sCACTZ,EAAMhD,iBAAiB6D,kBAE5BL,EAAAA,cAAA,MAAII,UAAU,mBACTZ,EAAM/C,cAEXuD,EAAAA,cAAA,MAAII,UAAU,mBACTZ,EAAM9C,UAAU2D,uBAQzCL,EAAAA,cAAA,OACII,UAAW7F,IAAW,gBAAiB,CACnC,yBAA0BoC,EAAcE,WAG5CmD,EAAAA,cAAA,aACIA,EAAAA,cAAA,aACIA,EAAAA,cAAA,UACIA,EAAAA,cAAA,UAAI,YACJA,EAAAA,cAAA,MAAIiB,QAAQ,KAAI,iBAGxBjB,EAAAA,cAAA,aACKrD,EAAcG,KAAKyC,KAAI,CAACzC,EAAMoE,IAC3BlB,EAAAA,cAAA,MACII,UAAW7F,IAAW,CAClBgH,IAAiB,IAAZzE,EAAK,KAEd0E,MAAO,CACHC,MAAOzE,EAAoBkE,IAE/B5F,IAAK4F,GAELlB,EAAAA,cAAA,UAAKjD,EAAoBmE,IACzBlB,EAAAA,cAAA,MAAII,UAAU,mBACTtD,EAAK,IAEVkD,EAAAA,cAAA,MAAII,UAAU,mBACTtD,EAAK,GAAG,UAM7BkD,EAAAA,cAAA,OACII,UAAU,yBACVoB,MAAO,CACHE,WA9WxB,SAAmD5E,GAC/C,IAAI6E,EAAiB,EASrB,MAAM,kBARe7E,EAAKyC,KAAI,CAACqC,EAAGV,KAC9B,MAAMW,EAAUC,WAAWF,EAAE,IACvBG,EAAS/E,EAAoBkE,GAAM,OACrCS,EAAiBE,GAAO,IAG5B,OADAF,GAAkBE,EACXE,CAAG,IAEwBvG,KAAK,KAAI,GACnD,CAoW4BwG,CACIrF,EAAcG,WAMjC","sources":["webpack://sponsorblock/./node_modules/classnames/index.js","webpack://sponsorblock/./src/pages/stats.js"],"sourcesContent":["/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n  'use strict';\n\n  var hasOwn = {}.hasOwnProperty;\n  function classNames() {\n    var classes = [];\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (!arg) continue;\n      var argType = typeof arg;\n      if (argType === 'string' || argType === 'number') {\n        classes.push(arg);\n      } else if (Array.isArray(arg)) {\n        if (arg.length) {\n          var inner = classNames.apply(null, arg);\n          if (inner) {\n            classes.push(inner);\n          }\n        }\n      } else if (argType === 'object') {\n        if (arg.toString === Object.prototype.toString) {\n          for (var key in arg) {\n            if (hasOwn.call(arg, key) && arg[key]) {\n              classes.push(key);\n            }\n          }\n        } else {\n          classes.push(arg.toString());\n        }\n      }\n    }\n    return classes.join(' ');\n  }\n  if (typeof module !== 'undefined' && module.exports) {\n    classNames.default = classNames;\n    module.exports = classNames;\n  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n    // register as 'classnames', consistent with npm package name\n    define('classnames', [], function () {\n      return classNames;\n    });\n  } else {\n    window.classNames = classNames;\n  }\n})();","import React, { useState, useEffect } from \"react\";\nimport classNames from \"classnames\";\n\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\n\nconst API_BASE = \"https://sponsor.ajay.app\";\nlet endpoint = \"/api/getTopUsers?categoryStats=true\";\nlet sortType = 0;\nlet category = \"all\";\nlet checkboxShowStats = false;\n\nconst IndexPage = () => {\n    const [totalStats, setTotalStats] = useState({\n        apiUsers: 0,\n        activeUsers: 0,\n        userCount: 0,\n        totalSubmissions: 0,\n        minutesSaved: 0,\n        viewCount: 0,\n    });\n    const [categoryStats, setCategoryStats] = useState({\n        visible: false,\n        data: [],\n    });\n\n    const categoryStatsTitles = [\n        \"Sponsor\",\n        \"Intro\",\n        \"Outro\",\n        \"Interaction\",\n        \"Self Promotion\",\n        \"Non-Music Section\",\n        \"Preview\",\n        \"Highlight\",\n        \"Filler\",\n        \"Exclusive Access\",\n        \"Chapter\"\n    ];\n    const categoryStatsColors = [\n        \"#00d400\",\n        \"#00ffff\",\n        \"#0202ed\",\n        \"#cc00ff\",\n        \"#ffff00\",\n        \"#ff9900\",\n        \"#008fd6\",\n        \"#ff1684\",\n        \"#6600ff\",\n        \"#008a5c\",\n        \"#ffd679\"\n    ];\n\n    function generateCssConicGradientFromCategoryStats(data) {\n        let lastPercentage = 0;\n        const piechartCode = data.map((d, index) => {\n            const percent = parseFloat(d[1]);\n            const str = `${categoryStatsColors[index]} 0 ${\n                lastPercentage + percent\n            }%`;\n            lastPercentage += percent;\n            return str;\n        });\n        return `conic-gradient(${piechartCode.join(\",\")})`;\n    }\n\n    const [topUsers, setTopUsers] = useState([]);\n\n    const [isTotalStatsLoading, setIsTotalStatsLoading] = useState(true);\n\n    function setTopUserData(clickedElement) {\n        const url = new URL(`${API_BASE}${endpoint}`);\n        url.searchParams.append(\"sortType\", sortType);\n        url.searchParams.append(\"category\", category);\n        return fetch(url)\n            .then((response) => {\n                if (response.ok) return response.json()\n                else return Promise.reject(response)\n            })\n            .then((resultData) => {\n                let size = resultData.userNames.length;\n\n                if (clickedElement) {\n                    [...document.getElementsByClassName(\"sorted\")].forEach(\n                        (el) => el.classList.remove(\"sorted\")\n                    );\n                    clickedElement.classList.add(\"sorted\");\n                    clickedElement.classList.remove(\"sort-loading\");\n                }\n\n                const transformedData = [];\n                for (let i = 0; i < size; i++) {\n                    const days = Math.floor(\n                        resultData.minutesSaved[i] / 60 / 24\n                    );\n                    const hours = (\n                        (resultData.minutesSaved[i] / 60) %\n                        24\n                    ).toFixed(1);\n\n                    let categoryStats = false;\n\n                    if (\"categoryStats\" in resultData) {\n                        const total = resultData.categoryStats[i].reduce(\n                            (accumulator, currentValue) =>\n                                accumulator + currentValue,\n                            0\n                        );\n                        categoryStats = resultData.categoryStats[i].map(\n                            (value) => [\n                                value,\n                                ((value / total) * 100).toFixed(2),\n                            ]\n                        );\n                    }\n\n                    transformedData.push({\n                        userName: resultData.userNames[i],\n                        viewCount: resultData.viewCounts[i],\n                        totalSubmissions: resultData.totalSubmissions[i],\n                        minutesSaved:\n                            (days > 0 ? days + \"d \" : \"\") +\n                            (hours > 0 ? hours + \"h \" : \"\"),\n                        categoryStats: categoryStats,\n                    });\n                }\n\n                setTopUsers(transformedData);\n            })\n            .catch((r) => console.error(r));\n    }\n\n    useEffect(() => {\n        fetch(API_BASE + \"/api/getTotalStats?countContributingUsers=true\")\n            .then((response) => {\n                if (response.ok) return response.json()\n                else return Promise.reject(response)\n            })\n            .then((resultData) => {\n                setIsTotalStatsLoading(false);\n                setTotalStats(resultData);\n            })\n            .catch((r) => console.error(r));\n        setTopUserData();\n    }, []);\n\n    const displayCategoryStats = (stats) => {\n        if (stats === false) return;\n        if (!checkboxShowStats) return;\n        setCategoryStats({ visible: true, data: stats });\n    };\n\n    const hideCategoryStats = () => {\n        setCategoryStats({ visible: false, data: [] });\n    };\n\n    return (\n        <Layout>\n            <Seo title=\"Stats\" />\n\n            <div className=\"container\">\n                <h2 className=\"text-center\">Overall Stats</h2>\n\n                <table>\n                    <tbody>\n                        <tr>\n                            <td>Active Users:</td>\n                            <td\n                                className={\n                                    isTotalStatsLoading ? \"loading\" : null\n                                }\n                            >\n                                {totalStats.apiUsers.toLocaleString()} users\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Contributing Users:</td>\n                            <td\n                                className={\n                                    isTotalStatsLoading ? \"loading\" : null\n                                }\n                            >\n                                {totalStats.userCount.toLocaleString()} users\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Submissions:</td>\n                            <td\n                                className={\n                                    isTotalStatsLoading ? \"loading\" : null\n                                }\n                            >\n                                {totalStats.totalSubmissions.toLocaleString()}{\" \"}\n                                segments\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Time Saved:</td>\n                            <td\n                                className={\n                                    isTotalStatsLoading ? \"loading\" : null\n                                }\n                            >\n                                {Math.floor(\n                                    totalStats.minutesSaved / 60 / 24 / 365\n                                )}{\" \"}\n                                years{\" \"}\n                                {Math.floor(totalStats.minutesSaved / 60 / 24) %\n                                    365}{\" \"}\n                                days{\" \"}\n                                {((totalStats.minutesSaved / 60) % 24).toFixed(\n                                    1\n                                )}{\" \"}\n                                hours\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Skip Count:</td>\n                            <td\n                                className={\n                                    isTotalStatsLoading ? \"loading\" : null\n                                }\n                            >\n                                {totalStats.viewCount.toLocaleString()} skips\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n\n                <div>\n                    <h2 className=\"text-center no-bottom-margin\">\n                        Top Contributors\n                    </h2>\n\n                    <div className=\"text-center text-small\">\n                        Click a column title to change the sort\n                    </div>\n                    <div className=\"text-center text-small\">\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                value={checkboxShowStats}\n                                onChange={(e) => {\n                                    checkboxShowStats = e.target.checked;\n                                }}\n                            />{\" \"}\n                            Show category stats on hover\n                        </label>\n                    </div>\n                    <div className=\"text-center text-small\">\n                        <label id=\"filterlabel\">\n                            Filter by Category:\n                            <select\n                                defaultValue=\"all\"\n                                onChange={(e) => {\n                                    endpoint = \"/api/getTopCategoryUsers\";\n                                    category = e.target.value;\n                                    if (category === \"all\")\n                                        endpoint = \"/api/getTopUsers\";\n                                    const label =\n                                        document.querySelector(\n                                            \"label#filterlabel\"\n                                        );\n                                    label.classList.add(\"sort-loading\");\n                                    setTopUserData().then(() =>\n                                        label.classList.remove(\"sort-loading\")\n                                    );\n                                }}\n                            >\n                                <option value=\"all\">All</option>\n                                <option value=\"sponsor\">Sponsor</option>\n                                <option value=\"intro\">Intro</option>\n                                <option value=\"outro\">Endcards/ Credits</option>\n                                <option value=\"interaction\">\n                                    Interaction Reminder\n                                </option>\n                                <option value=\"selfpromo\">\n                                    Unpaid/ Self Promotion\n                                </option>\n                                <option value=\"music_offtopic\">\n                                    Non-Music\n                                </option>\n                                <option value=\"preview\">Preview</option>\n                                <option value=\"poi_highlight\">Highlight</option>\n                                <option value=\"filler\">Filler</option>\n                                <option value=\"exclusive_access\">\n                                    Exclusive Access\n                                </option>\n                                <option value=\"chapter\">Chapter</option>\n                            </select>\n                        </label>\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"container-fluid stats-table\">\n                <table className=\"highlight-row-on-hover\">\n                    <thead>\n                        <tr>\n                            <th className=\"rank\">Rank</th>\n                            <th>User Name</th>\n                            <th\n                                className=\"pointer\"\n                                onClick={(e) => {\n                                    if (e.target.classList.contains(\"sorted\"))\n                                        return;\n                                    e.target.classList.add(\"sort-loading\");\n                                    sortType = 2;\n                                    setTopUserData(e.target);\n                                }}\n                            >\n                                Submissions\n                            </th>\n                            <th\n                                className=\"pointer sorted\"\n                                onClick={(e) => {\n                                    if (e.target.classList.contains(\"sorted\"))\n                                        return;\n                                    e.target.classList.add(\"sort-loading\");\n                                    sortType = 0;\n                                    setTopUserData(e.target);\n                                }}\n                            >\n                                Time Saved\n                            </th>\n                            <th\n                                className=\"pointer\"\n                                onClick={(e) => {\n                                    if (e.target.classList.contains(\"sorted\"))\n                                        return;\n                                    e.target.classList.add(\"sort-loading\");\n                                    sortType = 1;\n                                    setTopUserData(e.target);\n                                }}\n                            >\n                                Total Skips\n                            </th>\n                        </tr>\n                    </thead>\n\n                    <tbody>\n                        {topUsers.length === 0 ? (\n                            <tr className={\"row--even\"}>\n                                <td className=\"topUsersLoading\" colSpan=\"5\">\n                                    Loading...\n                                </td>\n                            </tr>\n                        ) : (\n                            topUsers.map((value, index) => (\n                                <tr\n                                    className={`row--${\n                                        index % 2 ? \"odd\" : \"even\"\n                                    }`}\n                                    key={index}\n                                    onMouseEnter={(_) => {\n                                        displayCategoryStats(\n                                            value.categoryStats\n                                        );\n                                    }}\n                                    onMouseLeave={(_) => {\n                                        hideCategoryStats();\n                                    }}\n                                >\n                                    <td className=\"rank celltype-number\">\n                                        {index + 1}.\n                                    </td>\n                                    <td>{value.userName}</td>\n                                    <td className=\"celltype-number has--categorystats\">\n                                        {value.totalSubmissions.toLocaleString()}\n                                    </td>\n                                    <td className=\"celltype-number\">\n                                        {value.minutesSaved}\n                                    </td>\n                                    <td className=\"celltype-number\">\n                                        {value.viewCount.toLocaleString()}\n                                    </td>\n                                </tr>\n                            ))\n                        )}\n                    </tbody>\n                </table>\n\n                <div\n                    className={classNames(\"categorystats\", {\n                        \"categorystats--hidden\": !categoryStats.visible,\n                    })}\n                >\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Category</th>\n                                <th colSpan=\"2\">Submissions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {categoryStats.data.map((data, index) => (\n                                <tr\n                                    className={classNames({\n                                        dim: data[0] === 0,\n                                    })}\n                                    style={{\n                                        color: categoryStatsColors[index],\n                                    }}\n                                    key={index}\n                                >\n                                    <td>{categoryStatsTitles[index]}</td>\n                                    <td className=\"celltype-number\">\n                                        {data[0]}\n                                    </td>\n                                    <td className=\"celltype-number\">\n                                        {data[1]}%\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                    <div\n                        className=\"categorystats-piechart\"\n                        style={{\n                            background:\n                                generateCssConicGradientFromCategoryStats(\n                                    categoryStats.data\n                                ),\n                        }}\n                    ></div>\n                </div>\n            </div>\n        </Layout>\n    );\n};\n\nexport default IndexPage;\n"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","key","call","join","module","exports","default","API_BASE","endpoint","sortType","category","checkboxShowStats","IndexPage","totalStats","setTotalStats","useState","apiUsers","activeUsers","userCount","totalSubmissions","minutesSaved","viewCount","categoryStats","setCategoryStats","visible","data","categoryStatsTitles","categoryStatsColors","topUsers","setTopUsers","isTotalStatsLoading","setIsTotalStatsLoading","setTopUserData","clickedElement","url","URL","searchParams","append","fetch","then","response","ok","json","Promise","reject","resultData","size","userNames","_toConsumableArray","document","getElementsByClassName","forEach","el","classList","remove","add","transformedData","days","Math","floor","hours","toFixed","total","reduce","accumulator","currentValue","map","value","userName","viewCounts","catch","r","console","error","useEffect","React","Layout","Seo","title","className","toLocaleString","type","onChange","e","target","checked","id","defaultValue","label","querySelector","onClick","contains","colSpan","index","onMouseEnter","_","stats","onMouseLeave","dim","style","color","background","lastPercentage","d","percent","parseFloat","str","generateCssConicGradientFromCategoryStats"],"sourceRoot":""}